package pack;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Arrays;

import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.ws.Endpoint;
import javax.xml.ws.soap.SOAPBinding;

public class StartServer {
    
    private static Endpoint ep;
    
	public static void main(String[] args) {
		String publishURL = "http://"+"0.0.0.0"+":" + "8080" + "/helloservice";
		System.out.println("Starting Standalone Server");
		ServiceImpl serviceImpl = new ServiceImpl();
		
//		ep = Endpoint.create(serviceImpl);
		ep = Endpoint.create(SOAPBinding.SOAP12HTTP_BINDING, serviceImpl);
		
		// If you set "wsdlLocation" on the @WebService annotation,
		// then the referenced xsd files must be added to the endpoint
		// like this.
		// If they are not added, then the xsd won't be available on the published url
		
		// you can set the xsd only here, there's no xsd setting facility on @WebService
		// annotated class.
		// E.g. there's no "xsdLocation = helloPersonService.xsd" or similar
		
		// NOTE however that if you don't set wsdl/xsd files here nor
		// at @WebService annotation then they will be generated by the WS implementation
		ep.setMetadata(Arrays.asList(
		        sourceFromResource("/helloPersonService.wsdl"),
                sourceFromResource("/helloPersonService.xsd")
		        ));
//		Endpoint.publish(publishURL, serviceImpl);
		ep.publish(publishURL);
		System.out.println("started: " + ep.getBinding().getBindingID());
	}
	
	private static Source sourceFromResource(String name) {
        URL resource = StartServer.class.getResource(name);
        String systemId = resource.toExternalForm();
        InputStream inputStream;
        try {
            inputStream = resource.openStream();
        } catch (IOException e) {
            throw new RuntimeException("Failed to create InputStream from resource \""+ name +"\"", e);
        }
        return new StreamSource(inputStream, systemId);
    }
	
	public static void stop() {
	    ep.stop();
        System.out.println("stopped: " + ep.getBinding().getBindingID());
	}
}
